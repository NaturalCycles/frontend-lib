import{d as b,v as C,c as D,j as c,a as k,G as g,a0 as S,B as x,o as M}from"./chunks/framework.D_PpXas2.js";import{_ as w}from"./chunks/types.C-9dMxxX.js";import{_ as B}from"./chunks/is.util.NvFMntWM.js";import{i as m,_ as A}from"./chunks/string.util.DxuDbFn4.js";function R(t,e){return`${t.constructor.name}.${e}`}const L=t=>{if(t.length!==0)return t.length===1&&B(t[0])?t[0]:JSON.stringify(t)};class O{constructor(){this.m=new Map}has(e){return this.m.has(e)}get(e){return this.m.get(e)}set(e,i){this.m.set(e,i)}clear(){this.m.clear()}}const P=(t={})=>(e,i,n)=>{if(typeof n.value!="function")throw new TypeError("Memoization can be applied only to methods");const a=n.value,s=new Map,{logger:l=console,cacheFactory:u=()=>new O,cacheKeyFn:f=L}=t,v=String(i),_=R(e,v);return n.value=function(...o){const h=this,d=f(o);let r=s.get(h);if(r||(r=u(),s.set(h,r)),r.has(d))return r.get(d);const p=a.apply(h,o);try{r.set(d,p)}catch(F){l.error(F)}return p},w(n.value,{clear:()=>{l.log(`${_} @_Memo.clear()`),s.forEach(o=>o.clear()),s.clear()},getInstanceCache:()=>s,getCache:o=>s.get(o)}),n};var T=Object.defineProperty,N=Object.getOwnPropertyDescriptor,V=(t,e,i,n)=>{for(var a=N(e,i),s=t.length-1,l;s>=0;s--)(l=t[s])&&(a=l(e,i,a)||a);return a&&T(e,i,a),a};const j="__red-dot__",E=()=>{};class y{constructor(e){this.adminMode=!1,this.listening=!1,this.cfg={predicate:i=>i.ctrlKey&&i.key==="L",persistToLocalStorage:!0,localStorageKey:"__adminMode__",onRedDotClick:E,onChange:E,beforeEnter:()=>!0,beforeExit:()=>!0,...e}}startListening(){this.listening||m()||(this.adminMode=!!localStorage.getItem(this.cfg.localStorageKey),this.adminMode&&this.toggleRedDotVisibility(),document.addEventListener("keydown",this.keydownListener.bind(this),{passive:!0}),this.listening=!0)}stopListening(){m()||(document.removeEventListener("keydown",this.keydownListener),this.listening=!1)}async keydownListener(e){this.cfg.predicate(e)&&await this.toggleRedDot()}async toggleRedDot(){try{if(!await this.cfg[this.adminMode?"beforeExit":"beforeEnter"]())return}catch(e){console.error(e),alert(A(e));return}if(this.adminMode=!this.adminMode,this.toggleRedDotVisibility(),this.cfg.persistToLocalStorage){const{localStorageKey:e}=this.cfg;this.adminMode?localStorage.setItem(e,"1"):localStorage.removeItem(e)}this.cfg.onChange(this.adminMode)}toggleRedDotVisibility(){this.getRedDotElement().style.display=this.adminMode?"block":"none"}getRedDotElement(){const e=document.createElement("div");return e.id=j,e.style.cssText="position:fixed;width:24px;height:24px;margin-top:-12px;background-color:red;opacity:0.5;top:50%;left:0;z-index:9999999;cursor:pointer;border-radius:0 3px 3px 0",e.addEventListener("click",()=>this.cfg.onRedDotClick()),document.body.append(e),e}}V([P()],y.prototype,"getRedDotElement");const K=b({__name:"AdminModeDemo",setup(t){const e=new y({onChange:i=>console.log({adminMode:i}),onRedDotClick:()=>alert("RedDot clicked")});return C(()=>{e.startListening()}),(i,n)=>null}}),I={id:"adminservice",tabindex:"-1"},H=JSON.parse('{"title":"AdminService","description":"","frontmatter":{},"headers":[],"relativePath":"adminService.md","filePath":"adminService.md"}'),z={name:"adminService.md"},Q=Object.assign(z,{setup(t){return(e,i)=>{const n=x("Badge");return M(),D("div",null,[c("h1",I,[i[0]||(i[0]=k("AdminService ")),g(n,{text:"experimental",type:"warning"}),i[1]||(i[1]=k()),i[2]||(i[2]=c("a",{class:"header-anchor",href:"#adminservice","aria-label":'Permalink to "AdminService <Badge text="experimental" type="warning"/>"'},"​",-1))]),i[3]||(i[3]=S(`<h2 id="admin-mode" tabindex="-1">Admin Mode <a class="header-anchor" href="#admin-mode" aria-label="Permalink to &quot;Admin Mode&quot;">​</a></h2><p>Admin mode is activated by a combination of keys on a keyboard (no mobile support), visualized with the RedDot™ on the page.</p><p>Function <code>startListening()</code> enables listening for a key combination (Ctrl+Shift+L by default).</p><p>Example:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> admin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AdminService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onEnter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Entered Admin mode&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onExit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Exited Admin mode&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onRedDotClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;RedDot clicked&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">admin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startListening</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Try pressing <code>Ctrl+Shift+L</code> on the keyboard to see the RedDot™ in action.</p>`,6)),g(K)])}}});export{H as __pageData,Q as default};
